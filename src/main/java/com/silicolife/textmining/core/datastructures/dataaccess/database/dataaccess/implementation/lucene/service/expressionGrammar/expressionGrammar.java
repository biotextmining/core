/* Generated By:JavaCC: Do not edit this line. expressionGrammar.java */
package com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.lucene.service.expressionGrammar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.silicolife.textmining.core.interfaces.core.document.ISearchProperties;
import java.util.ArrayList;
import org.apache.lucene.search.Query;
import org.hibernate.search.query.dsl.QueryBuilder;
import com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.lucene.dao.GenericLuceneDaoImpl;
import com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.lucene.dao.IGenericLuceneDao;



public class expressionGrammar<T> implements expressionGrammarConstants {

  private  List<String> fields;

  private  QueryBuilder qb;

  private IGenericLuceneDao<T> genericDao;

    public List<String> getFields() {
        return fields;
        }
        public void setFields(List<String> fields) {
                this.fields = fields;
        }
        public QueryBuilder getQb() {
                return qb;
        }
        public void setQb(QueryBuilder qb) {
                this.qb = qb;
        }
        public IGenericLuceneDao<T> getGenericDao() {
                return genericDao;
        }
        public void setGenericDao(IGenericLuceneDao<T> genericDao) {
                this.genericDao = genericDao;
        }

  public Query parseExpression() throws ParseException
  {
    //expressionGrammar parser = new expressionGrammar(System.in);
    //List<String> fields = new ArrayList<String >();
    //fields.add("title");
    //fields.add("full text");
    //this.fields = fields;        Query result = null;
      try
      {
         result = this.one_line();
        //System.out.println("OK");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        this.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());

      }
      return result;
    }


        public  Map<String, String> putOnEqSentenceOnField(String value){
                Map<String, String> eqSentenceOnField = new HashMap<String, String>();
                for(String field : this.fields){
                        eqSentenceOnField.put(field, value);
                }
                return eqSentenceOnField;
        }

  final public Query one_line() throws ParseException {
 ArrayList<Query> queriesOut = new ArrayList<Query>();
    operation(queriesOut);
    //System.out.println(queriesOut.size());
    {if (true) return queriesOut.get(0);}
    throw new Error("Missing return statement in function");
  }

  final public int andOp(ArrayList<Query> queriesIn) throws ParseException {
    unary(queriesIn);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(AND);
      unary(queriesIn);
    }
          //System.out.println("AND");
          {if (true) return 1;}
    throw new Error("Missing return statement in function");
  }

  final public int orOp(ArrayList<Query> queriesIn) throws ParseException {
    unary(queriesIn);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      unary(queriesIn);
    }
          //System.out.println("OR");
          {if (true) return 2;}
    throw new Error("Missing return statement in function");
  }

  final public void operation(ArrayList<Query> queriesIn) throws ParseException {
 int op= 0; ArrayList<Query> queriesOut = new ArrayList<Query>();
    unary(queriesOut);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        op = andOp(queriesOut);
        break;
      case OR:
        jj_consume_token(OR);
        op = orOp(queriesOut);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
   {
          //System.out.println(op);
          if(op==1)
                queriesIn.add(this.genericDao.createMustQuery(queriesOut, this.qb));
          if(op==2)
                queriesIn.add(this.genericDao.createShouldQuery(queriesOut, this.qb));
          if(op==0)
                queriesIn.addAll(queriesOut);
        }
  }

  final public void t(ArrayList<Query> queriesIn) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
    case QUOTED:
      phrase(queriesIn);
      break;
    case 10:
      jj_consume_token(10);
      operation(queriesIn);
      jj_consume_token(11);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void phrase(ArrayList<Query> queriesIn) throws ParseException {
  Token phrase;
Map<String, String> eqSentenceOnField = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED:
      quoted(queriesIn);
      break;
    case WORD:
      word(queriesIn);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void quoted(ArrayList<Query> queriesIn) throws ParseException {
  Token quoted;
Map<String, String> eqSentenceOnField = null;
    quoted = jj_consume_token(QUOTED);
          //System.out.println(quoted.toString().replace("\"",""));
          //System.out.println(this.putOnEqSentenceOnField(phrase.toString().replace("\"","")).toString());
          eqSentenceOnField = this.putOnEqSentenceOnField(quoted.toString().replace("\u005c"",""));
          queriesIn.add(this.genericDao.createShouldPhraseQuery(eqSentenceOnField, this.qb));
  }

  final public void word(ArrayList<Query> queriesIn) throws ParseException {
  Token word;
Map<String, String> eqSentenceOnField = null;
    word = jj_consume_token(WORD);
          //System.out.println(word.toString());
          //System.out.println("word");
          //System.out.println(this.putOnEqSentenceOnField(phrase.toString().replace("\"","")).toString());
          eqSentenceOnField = this.putOnEqSentenceOnField(word.toString());
          queriesIn.add(this.genericDao.createShouldPhraseQuery(eqSentenceOnField, this.qb));
  }

  final public void unary(ArrayList<Query> queriesIn) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      notRule(queriesIn);
      break;
    case WORD:
    case QUOTED:
    case 10:
      t(queriesIn);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void notRule(ArrayList<Query> queriesIn) throws ParseException {
 ArrayList<Query> queriesOut = new ArrayList<Query>();
    jj_consume_token(NOT);
    t(queriesOut);
          //System.out.println("not");
          //System.out.println(queriesOut.size());
          queriesIn.add(this.genericDao.createMustNot(queriesOut, this.qb));
  }

  /** Generated Token Manager. */
  public expressionGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x80,0xc0,0xc0,0x620,0x220,0x720,};
   }

  /** Constructor with InputStream. */
  public expressionGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public expressionGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new expressionGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public expressionGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new expressionGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public expressionGrammar(expressionGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(expressionGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
