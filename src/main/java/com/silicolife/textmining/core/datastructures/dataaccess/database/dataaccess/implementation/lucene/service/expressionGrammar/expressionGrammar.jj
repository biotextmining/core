/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(expressionGrammar)package com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.lucene.service.expressionGrammar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.silicolife.textmining.core.interfaces.core.document.ISearchProperties;
import java.util.ArrayList;
import org.apache.lucene.search.Query;
import org.hibernate.search.query.dsl.QueryBuilder;
import com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.lucene.dao.GenericLuceneDaoImpl;
import com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.lucene.dao.IGenericLuceneDao;



public class expressionGrammar<T>{

  private  List<String> fields;

  private  QueryBuilder qb;

  private IGenericLuceneDao<T> genericDao;

    public List<String> getFields() {
	return fields;
	}
	public void setFields(List<String> fields) {
		this.fields = fields;
	}
	public QueryBuilder getQb() {
		return qb;
	}
	public void setQb(QueryBuilder qb) {
		this.qb = qb;
	}
	public IGenericLuceneDao<T> getGenericDao() {
		return genericDao;
	}
	public void setGenericDao(IGenericLuceneDao<T> genericDao) {
		this.genericDao = genericDao;
	}
  
  public Query parseExpression() throws ParseException  {    //expressionGrammar parser = new expressionGrammar(System.in);
    //List<String> fields = new ArrayList<String >();
    //fields.add("title");
    //fields.add("full text");
    //this.fields = fields;	Query result = null;      try
      {
         result = this.one_line();
        //System.out.println("OK");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        this.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        
      }
      return result;
    }      
	public  Map<String, String> putOnEqSentenceOnField(String value){
		Map<String, String> eqSentenceOnField = new HashMap<String, String>();
		for(String field : this.fields){
			eqSentenceOnField.put(field, value);
		}
		return eqSentenceOnField;
	}}PARSER_END(expressionGrammar)SKIP :{  " "| "\r"| "\t"| "\n"}

TOKEN: {
  < WORD :
    	(  	      ~["&", "+", "|","!", "\""," ","(",")", ";"]
  )+  

 >
|   
	< AND: ("&" | "+" | "AND ") >
| 	< OR: ("|" | "OR ") >
|   < NOT: ("!") >
}

TOKEN: {
<QUOTED: 
    "\"" 
    (
         "\\" ~[]     //any escaped character
    |                 //or
        ~["\""]  //any character except quote
    )* 
    "\"" > 

}


Query one_line() :{ArrayList<Query> queriesOut = new ArrayList<Query>();}{      operation(queriesOut) ";"
       {
    //System.out.println(queriesOut.size());    return queriesOut.get(0);  }}


int andOp(ArrayList<Query> queriesIn) :
{}
{
unary(queriesIn)
(
    (
      < AND >
    )
    unary(queriesIn)
  )*

	{
	  //System.out.println("AND");
	  return 1;
	}
}

int orOp(ArrayList<Query> queriesIn):
{ }
{
unary(queriesIn)
(
    (
      < OR >
    )
    unary(queriesIn)
  )*
	  
	  
	{
	  //System.out.println("OR");
	  return 2;
	}
}
  

void operation(ArrayList<Query> queriesIn):
{int op= 0; ArrayList<Query> queriesOut = new ArrayList<Query>();}
{
   unary(queriesOut) 
  (
    < AND > op= andOp(queriesOut) 
	|
	 < OR > op =orOp(queriesOut) 
	)?
 {
   {
	  //System.out.println(op);
	  if(op==1)
	  	queriesIn.add(this.genericDao.createMustQuery(queriesOut, this.qb));
	  if(op==2)
	  	queriesIn.add(this.genericDao.createShouldQuery(queriesOut, this.qb));
	  if(op==0)
	  	queriesIn.addAll(queriesOut);
	}
 }
}


  

void t(ArrayList<Query> queriesIn) :
{} {
	(	  
    
    phrase(queriesIn) 
    
  | "("operation(queriesIn)")"
  
  )
}


void phrase(ArrayList<Query> queriesIn) :
{ Token phrase;
Map<String, String> eqSentenceOnField = null;
}  {	 quoted(queriesIn)
|
	word(queriesIn)
  }

  void quoted(ArrayList<Query> queriesIn) :
{ Token quoted;
Map<String, String> eqSentenceOnField = null;
}
  {
	 quoted=<QUOTED>

	{
	  //System.out.println(quoted.toString().replace("\"",""));
	  //System.out.println(this.putOnEqSentenceOnField(phrase.toString().replace("\"","")).toString());
	  eqSentenceOnField = this.putOnEqSentenceOnField(quoted.toString().replace("\"",""));
	  queriesIn.add(this.genericDao.createShouldPhraseQuery(eqSentenceOnField, this.qb));
	}
  }

  void word(ArrayList<Query> queriesIn) :
{ Token word;
Map<String, String> eqSentenceOnField = null;
}
  {
	word=<WORD>
	{
	  //System.out.println(word.toString());
	  //System.out.println("word");
	  //System.out.println(this.putOnEqSentenceOnField(phrase.toString().replace("\"","")).toString());
	  eqSentenceOnField = this.putOnEqSentenceOnField(word.toString());
	  queriesIn.add(this.genericDao.createShouldPhraseQuery(eqSentenceOnField, this.qb));
	}
  }
void unary(ArrayList<Query> queriesIn) :
{}
{
   notRule(queriesIn)
| t(queriesIn)

}

void notRule (ArrayList<Query> queriesIn) :
{ArrayList<Query> queriesOut = new ArrayList<Query>(); }
{
 < NOT > t(queriesOut)
	{
	  //System.out.println("not");
	  //System.out.println(queriesOut.size());
	  queriesIn.add(this.genericDao.createMustNot(queriesOut, this.qb));
	}
}
  
