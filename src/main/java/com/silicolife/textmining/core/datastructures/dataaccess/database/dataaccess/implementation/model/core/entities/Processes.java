package com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.model.core.entities;

import java.util.Date;

// Generated 23/Mar/2015 16:36:00 by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Fields;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.annotations.SortableField;
import org.hibernate.search.annotations.Store;

/**
 * Processes generated by hbm2java
 */
@Entity
@Indexed
@Table(name = "processes")
public class Processes implements java.io.Serializable {

	private long proId;
	private ProcessOrigins processOrigins;
	private ProcessTypes processTypes;
	private String proName;
	private String proNotes;
	private boolean proActive;
	private Date proCreateDate;
	private Date proUpdateDate;
	private Integer proVersion;
	private Set<AnnotationLogs> annotationLogses = new HashSet<AnnotationLogs>(0);
	private Set<CorpusHasProcesses> corpusHasProcesseses = new HashSet<CorpusHasProcesses>(0);
	private Set<ProcessProperties> processPropertieses = new HashSet<ProcessProperties>(0);
	private Set<Annotations> annotationses = new HashSet<Annotations>(0);

	public Processes() {
	}

	public Processes(long proId, ProcessOrigins processOrigins, ProcessTypes processTypes, boolean proActive,int proVersion) {
		this.proId = proId;
		this.processOrigins = processOrigins;
		this.processTypes = processTypes;
		this.proActive = proActive;
		this.proCreateDate = new Date();
		this.proUpdateDate = new Date();
		this.proVersion=proVersion;
	}

	public Processes(long proId, ProcessOrigins processOrigins, ProcessTypes processTypes, String proName, String proNotes, boolean proActive,
			Date proCreateDate,Date proUpdateDate,Integer proVersion,
			Set<AnnotationLogs> annotationLogses, Set<CorpusHasProcesses> corpusHasProcesseses, Set<ProcessProperties> processPropertieses, Set<Annotations> annotationses) {
		this.proId = proId;
		this.processOrigins = processOrigins;
		this.processTypes = processTypes;
		this.proName = proName;
		this.proNotes = proNotes;
		this.proActive = proActive;
		this.proCreateDate = proCreateDate;
		this.proUpdateDate = proUpdateDate;
		this.proVersion = proVersion;
		this.annotationLogses = annotationLogses;
		this.corpusHasProcesseses = corpusHasProcesseses;
		this.processPropertieses = processPropertieses;
		this.annotationses = annotationses;
	}

	@Id
	@Column(name = "pro_id", unique = true, nullable = false)
	public long getProId() {
		return this.proId;
	}

	public void setProId(long proId) {
		this.proId = proId;
	}

	@IndexedEmbedded
	//@AttributeOverrides({ @AttributeOverride(name = "pro_po_Id", column = @Column(name = "po_id", unique = true, nullable = false)),
	//		@AttributeOverride(name = "pro_po_description", column = @Column(name = "po_description", unique = true, nullable = false)) })
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pro_process_origin_id", nullable = false)
	public ProcessOrigins getProcessOrigins() {
		return this.processOrigins;
	}

	public void setProcessOrigins(ProcessOrigins processOrigins) {
		this.processOrigins = processOrigins;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pro_process_type_id", nullable = false)
	public ProcessTypes getProcessTypes() {
		return this.processTypes;
	}

	public void setProcessTypes(ProcessTypes processTypes) {
		this.processTypes = processTypes;
	}

	@Fields(value = { 
			@Field(name="pro_nameCS",index=Index.YES, analyze=Analyze.YES, analyzer = @Analyzer(definition="KeywordsSplitter"), store=Store.NO),
			@Field(name="pro_nameNCS",index=Index.YES, analyze=Analyze.YES,analyzer = @Analyzer(definition="toLowerCase"), store=Store.NO),
			@Field(name = "proNameSort", analyze = Analyze.NO, store = Store.YES)	
	})
	@SortableField(forField = "proNameSort")
	@Column(name = "pro_name", length = 500)
	public String getProName() {
		return this.proName;
	}

	public void setProName(String proName) {
		this.proName = proName;
	}

	@Fields(value = { 
			@Field(name="pro_notesCS",index=Index.YES, analyze=Analyze.YES, analyzer = @Analyzer(definition="KeywordsSplitter"), store=Store.NO),
			@Field(name="pro_notesNCS",index=Index.YES, analyze=Analyze.YES,analyzer = @Analyzer(definition="toLowerCase"), store=Store.NO),
	})
	@Column(name = "pro_notes", length = 65535)
	public String getProNotes() {
		return this.proNotes;
	}

	public void setProNotes(String proNotes) {
		this.proNotes = proNotes;
	}

	@Field
	@Column(name = "pro_active", nullable = false)
	public boolean isProActive() {
		return this.proActive;
	}

	public void setProActive(boolean proActive) {
		this.proActive = proActive;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "processes")
	public Set<AnnotationLogs> getAnnotationLogses() {
		return this.annotationLogses;
	}

	public void setAnnotationLogses(Set<AnnotationLogs> annotationLogses) {
		this.annotationLogses = annotationLogses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "processes")
	public Set<CorpusHasProcesses> getCorpusHasProcesseses() {
		return this.corpusHasProcesseses;
	}

	public void setCorpusHasProcesseses(Set<CorpusHasProcesses> corpusHasProcesseses) {
		this.corpusHasProcesseses = corpusHasProcesseses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "processes")
	public Set<ProcessProperties> getProcessPropertieses() {
		return this.processPropertieses;
	}

	public void setProcessPropertieses(Set<ProcessProperties> processPropertieses) {
		this.processPropertieses = processPropertieses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "processes")
	public Set<Annotations> getAnnotationses() {
		return this.annotationses;
	}

	public void setAnnotationses(Set<Annotations> annotationses) {
		this.annotationses = annotationses;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "pro_create_date", length = 19)
	public Date getProCreateDate() {
		return proCreateDate;
	}

	public void setProCreateDate(Date proCreateDate) {
		this.proCreateDate = proCreateDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "pro_update_date", length = 19)
	public Date getProUpdateDate() {
		return proUpdateDate;
	}

	public void setProUpdateDate(Date proUpdateDate) {
		this.proUpdateDate = proUpdateDate;
	}

	@Column(name = "pro_version")
	public Integer getProVersion() {
		return proVersion;
	}

	public void setProVersion(Integer proVersion) {
		this.proVersion = proVersion;
	}

}
