package com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.model.core.entities;

// Generated 23/Mar/2015 16:36:00 by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.apache.lucene.analysis.core.KeywordTokenizerFactory;
import org.apache.lucene.analysis.core.LowerCaseFilterFactory;
import org.apache.lucene.analysis.core.StopFilterFactory;
import org.apache.lucene.analysis.ngram.EdgeNGramFilterFactory;
import org.apache.lucene.analysis.standard.StandardTokenizerFactory;
import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.AnalyzerDef;
import org.hibernate.search.annotations.AnalyzerDefs;
import org.hibernate.search.annotations.Boost;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Fields;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.annotations.Parameter;
import org.hibernate.search.annotations.Store;
import org.hibernate.search.annotations.TokenFilterDef;
import org.hibernate.search.annotations.TokenizerDef;

import com.silicolife.textmining.core.datastructures.dataaccess.database.dataaccess.implementation.lucene.bridges.ResourcesBridge;

/**
 * ResourceElements generated by hbm2java
 */
@Entity
@Indexed
@AnalyzerDefs({

	@AnalyzerDef(name = "keywordEdgeAnalyzer",

			// Split input into keywords
	tokenizer = @TokenizerDef(factory = KeywordTokenizerFactory.class),

	filters = {
				@TokenFilterDef(factory = LowerCaseFilterFactory.class),
				@TokenFilterDef(factory = StopFilterFactory.class),
				@TokenFilterDef(factory = EdgeNGramFilterFactory.class, params = {
						@Parameter(name = "minGramSize", value = "3"),
						@Parameter(name = "maxGramSize", value = "30") 
				}) 
	}),

	@AnalyzerDef(name = "tokenEdgeAnalyzer",

	// Split input into tokens
	tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),

	filters = {
			@TokenFilterDef(factory = LowerCaseFilterFactory.class),
			@TokenFilterDef(factory = StopFilterFactory.class),
			@TokenFilterDef(factory = EdgeNGramFilterFactory.class, params = {
					@Parameter(name = "minGramSize", value = "4"),
					@Parameter(name = "maxGramSize", value = "8") 
			})
	})
})

@Table(name = "resource_elements")
public class ResourceElements implements java.io.Serializable {

	private long resId;
	private Classes classes;
	private Resources resources;
	private String resElement;
	private Integer resPriorety;
	private boolean resActive;
	private Set<Annotations> annotationses = new HashSet<Annotations>(0);
	private Set<ResourceElementExtenalIds> resourceElementExtenalIdses = new HashSet<ResourceElementExtenalIds>(0);
	private Set<ResourceElementRelations> resourceElementRelationsesForRelResourceElementIdA = new HashSet<ResourceElementRelations>(0);
	private Set<ResourceElementRelations> resourceElementRelationsesForRelResourceElementIdB = new HashSet<ResourceElementRelations>(0);
	private Set<Synonyms> synonymses = new HashSet<Synonyms>(0);

	public ResourceElements() {
	}

	public ResourceElements(long resId, Resources resources, String resElement, boolean resActive) {
		this.resId = resId;
		this.resources = resources;
		this.resElement = resElement;
		this.resActive = resActive;
	}

	public ResourceElements(long resId, Classes classes, Resources resources, String resElement, Integer resPriorety, boolean resActive, Set<Annotations> annotationses,
			Set<ResourceElementExtenalIds> resourceElementExtenalIdses, Set<ResourceElementRelations> resourceElementRelationsesForRelResourceElementIdA,
			Set<ResourceElementRelations> resourceElementRelationsesForRelResourceElementIdB, Set<Synonyms> synonymses) {
		this.resId = resId;
		this.classes = classes;
		this.resources = resources;
		this.resElement = resElement;
		this.resPriorety = resPriorety;
		this.resActive = resActive;
		this.annotationses = annotationses;
		this.resourceElementExtenalIdses = resourceElementExtenalIdses;
		this.resourceElementRelationsesForRelResourceElementIdA = resourceElementRelationsesForRelResourceElementIdA;
		this.resourceElementRelationsesForRelResourceElementIdB = resourceElementRelationsesForRelResourceElementIdB;
		this.synonymses = synonymses;
	}

	@Id
	@DocumentId
	@Column(name = "res_id", unique = true, nullable = false)
	public long getResId() {
		return this.resId;
	}

	public void setResId(long resId) {
		this.resId = resId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "res_class_id")
	public Classes getClasses() {
		return this.classes;
	}

	public void setClasses(Classes classes) {
		this.classes = classes;
	}

	@Field
	@FieldBridge(impl = ResourcesBridge.class)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "res_resource_id", nullable = false)
	public Resources getResources() {
		return this.resources;
	}

	public void setResources(Resources resources) {
		this.resources = resources;
	}

	@Fields( {
		@Field(index=Index.YES, analyze=Analyze.NO, store=Store.NO),
		@Field(name = "keywordEdgeNGram_res_element", index = Index.YES, store = Store.NO,
		analyze = Analyze.YES, analyzer = @Analyzer(definition = "keywordEdgeAnalyzer"), boost = @Boost(2)),
		@Field(name = "tokenEdgeNGram_res_element", index = Index.YES, store = Store.NO,
		analyze = Analyze.YES, analyzer = @Analyzer(definition = "tokenEdgeAnalyzer"))
	})
	@Column(name = "res_element", nullable = false, length = 500)
	public String getResElement() {
		return this.resElement;
	}

	public void setResElement(String resElement) {
		this.resElement = resElement;
	}

	@Column(name = "res_priorety")
	public Integer getResPriorety() {
		return this.resPriorety;
	}

	public void setResPriorety(Integer resPriorety) {
		this.resPriorety = resPriorety;
	}

	@Field(index=Index.YES, analyze=Analyze.NO, store=Store.NO)
	@Column(name = "res_active", nullable = false)
	public boolean isResActive() {
		return this.resActive;
	}

	public void setResActive(boolean resActive) {
		this.resActive = resActive;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "resourceElements")
	public Set<Annotations> getAnnotationses() {
		return this.annotationses;
	}

	public void setAnnotationses(Set<Annotations> annotationses) {
		this.annotationses = annotationses;
	}

	@IndexedEmbedded
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "resourceElements")
	public Set<ResourceElementExtenalIds> getResourceElementExtenalIdses() {
		return this.resourceElementExtenalIdses;
	}

	public void setResourceElementExtenalIdses(Set<ResourceElementExtenalIds> resourceElementExtenalIdses) {
		this.resourceElementExtenalIdses = resourceElementExtenalIdses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "resourceElementsByRelResourceElementIdA")
	public Set<ResourceElementRelations> getResourceElementRelationsesForRelResourceElementIdA() {
		return this.resourceElementRelationsesForRelResourceElementIdA;
	}

	public void setResourceElementRelationsesForRelResourceElementIdA(Set<ResourceElementRelations> resourceElementRelationsesForRelResourceElementIdA) {
		this.resourceElementRelationsesForRelResourceElementIdA = resourceElementRelationsesForRelResourceElementIdA;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "resourceElementsByRelResourceElementIdB")
	public Set<ResourceElementRelations> getResourceElementRelationsesForRelResourceElementIdB() {
		return this.resourceElementRelationsesForRelResourceElementIdB;
	}

	public void setResourceElementRelationsesForRelResourceElementIdB(Set<ResourceElementRelations> resourceElementRelationsesForRelResourceElementIdB) {
		this.resourceElementRelationsesForRelResourceElementIdB = resourceElementRelationsesForRelResourceElementIdB;
	}

	@IndexedEmbedded
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "resourceElements")
	public Set<Synonyms> getSynonymses() {
		return this.synonymses;
	}

	public void setSynonymses(Set<Synonyms> synonymses) {
		this.synonymses = synonymses;
	}

}
